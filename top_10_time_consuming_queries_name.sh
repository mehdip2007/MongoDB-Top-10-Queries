####this script is generated by https://www.linkedin.com/in/donald-bedroya-2b2144100/
#!/bin/bash
read log
declare -A matrix
num_rows=$2
num_columns=2

##Default values setting
for ((i=1;i<=num_rows;i++)) do
    for ((j=1;j<=num_columns;j++)) do
       if [ $j == 2 ]
       then
        matrix[$i,$j]="n"
       else
       matrix[$i,$j]=0
       fi
    done
done

###################################This Part of script can be used for troubleshooting
##Default values setting
##Print Default values
#f1="%$((${#num_rows}+1))s"
#f2=" %9s"

#printf "$f1" ''
#for ((i=1;i<=num_rows;i++)) do
#    printf "$f2" $i
#done
#echo

#for ((j=1;j<=num_columns;j++)) do
#    printf "$f1" $j
#    for ((i=1;i<=num_rows;i++)) do
#        printf "$f2" ${matrix[$i,$j]}
#    done
#    echo
#done
##Print Default values
###################################This Part of script can be used for troubleshooting

yesterday=$(date --date=' 200 days ago' '+%Y%m%d')
echo $yesterday
while IFS='' read -r line || [[ -n "$line" ]]; do
   if [[ ${line:0:10} =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]
   then
    if [ "${line:(-2)}" == "ms" ]
    then
   sub_str_shard=${line:31:8}
    if [ $sub_str_shard != "SHARDING" ];
     then
   sub_str=${line:0:10}
   date_line=$(date --date=$sub_str '+%Y%m%d')
   result=`expr $date_line - $yesterday`
   if [ $result  -gt 0 ];
   then
    queryRtime="${line##* }"
 #   pureqrt=${queryRtime::-2}
    pureqrt=$(echo $queryRtime | cut -d "m" -f 1)
 #    echo ${Rtime::$((${#Rtime}-2))}

##finding th min value

   declare -i min=-1
   for ((i=1;i<=num_rows;i++)) do
   if [ $min -lt "0" ]; then
      min=${matrix[$i,1]}
      minAddress=$i
#      echo $min
   fi
   if [ ${matrix[$i,1]} -lt $min ]; then
      min=${matrix[$i,1]}
#      echo $min
      minAddress=$i
   fi
   done
#   echo $minAddress
##finding th min value

##replacing min value if there is a grater number

   if [ $pureqrt -gt $min ]; then
      matrix[$minAddress,1]=$pureqrt
      matrix[$minAddress,2]=$line
#     echo $minAddress
   fi

##replacing min value if there is a grater number
   fi
   fi
   fi
   fi
done < "$1"

##Sorting
for (( i = 0; i <= num_rows  ; i++ ))
do
   for (( j = $i; j <= num_rows; j++ ))
   do
      if [[ ${matrix[$i,1]} -gt ${matrix[$j,1]} ]]; then
           t=${matrix[$i,1]}
           l=${matrix[$i,2]}
           matrix[$i,1]=${matrix[$j,1]}
           matrix[$i,2]=${matrix[$j,2]}
           matrix[$j,1]=$t
           matrix[$j,2]=$l
      fi
   done
done
##Sorting

##File Generation

 for (( t =0 ; t <= num_rows; t++ ))
   do
echo  ${matrix[$t,2]} >> /tmp/top_10_mongodb_queries
done
##File Generation

##sending Email

mailx -s "Top 10 MongoDb Queries $log"  narges.gh@mtnirancell.ir, donald.b@mtnirancell.ir , mehdi.pourh@mtnirancell.ir  < /tmp/top_10_mongodb_queries

##sending Email

##removing file

rm /tmp/top_10_mongodb_queries

##removing file
###################################This Part of script can be used for troubleshooting
##Print Default values
if1="%$((${#num_rows}+1))s"
f2=" %9s"

printf "$f1" ''
for ((i=1;i<=num_rows;i++)) do
    printf "$f2" $i
done
echo

for ((j=1;j<=num_columns;j++)) do
    printf "$f1" $j
    for ((i=1;i<=num_rows;i++)) do
        printf "$f2" ${matrix[$i,$j]}
    done
    echo
done
##Print Default values
###################################This Part of script can be used for troubleshooting
